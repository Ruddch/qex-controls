i-suggest-example
    &"./capitals.json"
    &"./i-suggest__custom.less"
    ul.i-example__list
        li.i-example__list-item

            p
                "The i::suggest contains some js glue between i::input and i::select. "
                "Suggest object also provides access to 'data' object via corresponding model's property. "
                "Constructor can recognize following types of input data: String, Array, "
                a
                    @href "http://backbonejs.org/#Collection"
                    "Backbone.Collection"
                " and Object"
            CTPL-SHOW Usage
                i::suggest ( options )

            CALL i-suggest-example__options
            CALL i-suggest-example__data
            CALL i-suggest-example__url
            CALL i-suggest-example__sizing
            CALL i-suggest-example__customization

i-suggest-example__options
    li.i-example__list-item
        h4
            "Options"
        p
            dl
                dt
                    "delim"
                dd
                    "String. ',' by default"
                dt
                    "placeholder"
                dd
                    "Placeholder for input. An empty string by default"
                dt
                    "option"
                dd
                    "String or Function. If your suggested data contains neither 'label', nor 'value' fields you can explicitly specify a field 'name' or callback to use instead."
                dt
                    "filter"
                dd
                    "Function. A callback for filtering existing options."
                dt
                    "min"
                dd
                    "minimum number of characters required to request data"
                dt
                    "mode"
                dd
                    "String. Values: radio (default) or check"
                dt
                    "disabled"
                dd
                    "Boolean. false by default"
                dt
                    "viewButton"
                dd
                    "Template function for i-select button customization."
                dt
                    "viewOption"
                dd
                    "Template function for i-select option customization."
                dt
                    "loading"
                dd
                    "Boolean. false by default"
                dt
                    "debounce"
                dd
                    "Number. Debounce value in milliseconds, 150 by default"
                dt
                    "size"
                dd
                    "String. L, M or S. M by default"
                

i-suggest-example__data
    li.i-example__list-item
        CTPL-SUITE Data
            CTPL-CODE String
                i::suggest ('One,Two,Three') AS $suggest_string
                CTPL-TEST set 'value'
                    expect( $suggest_string ).to.be.an.instanceof(Backbone.Model);
                    expect( $suggest_string.get('data') ).to.be.an.instanceof(Backbone.Collection);
            CTPL-CODE Array
                i::suggest (['One','Two','Three']) AS $suggest_array
                CTPL-TEST set 'value'
                    expect( $suggest_array ).to.be.an.instanceof(Backbone.Model);
                    expect( $suggest_array.get('data') ).to.be.an.instanceof(Backbone.Collection);

i-suggest-example__url
    li.i-example__list-item
        CTPL-SUITE URL
            "Suggest element by URL with remote data request."
            CTPL-CODE set path to json
                i::suggest './examples/i-suggest/capitals.json' AS $suggest__url
                CTPL-TEST type checking, test data length
                    expect( $suggest__url ).to.be.an.instanceof(Backbone.Model);
                    expect( $suggest__url.get('data') ).to.be.an.instanceof(Backbone.Collection);
                    if ($suggest__url.get('data').length === 0) {
                        describe('$suggestURL check async', function(){
                            it('on fetch', function(done){
                                $suggest__url.get('data').once(
                                    'sync',
                                    function(){
                                        expect( $suggest__url.get('data').length ).to.be.ok;
                                        done();
                                    }
                                );
                            });
                        });
                    }
            CTPL-CODE check mode
                i::suggest ({
                    'data': './examples/i-suggest/capitals.json',
                    'mode': 'check'
                }) AS $suggest__url_check
            CTPL-CODE pass value through a http request
                i::suggest ({
                    'data': './examples/i-suggest/capitals.json?search=%%input%%',
                    'min': 1,
                    'popup': {
                        'align': 'end'
                    }
                }) AS $suggest__url_param
                CTPL-TEST type checking
                    expect( $suggest__url_param ).to.be.an.instanceof(Backbone.Model);
                    expect( $suggest__url_param.get('data') ).to.be.an.instanceof(Backbone.Collection);
            

i-suggest-example__sizing
    li.i-example__list-item
        CTPL-SUITE Sizing
            CTPL-CODE Sizing scale
                div.i-example__button-sizing
                    div
                        @style "width:32%"
                        i::suggest ('One,Two,Three') ({"size": "L", "placeholder": "L-size"})
                    div
                        @style "width:32%"
                        i::suggest ('One,Two,Three') ({"size": "M", "placeholder": "M-size"})
                    div
                        @style "width:32%"
                        i::suggest ('One,Two,Three') ({"size": "S", "placeholder": "S-size"})

i-suggest-example__customization
    li.i-example__list-item
        CTPL-SUITE Customization

            CTPL-CODE set option as a String
                i::suggest ({
                    'data': './examples/i-suggest/capitals.json',
                    'option': 'country'
                }) AS $suggest__option_string
                CTPL-TEST type checking
                    expect( $suggest__option_string ).to.be.an.instanceof(Backbone.Model);
                    expect( $suggest__option_string.get('data') ).to.be.an.instanceof(Backbone.Collection);

            CTPL-CODE set option as a Function
                i::suggest ({
                    'data': './examples/i-suggest/capitals.json',
                    'option': function(option){
                        return option.get('capital') + " " + option.get('code');
                    }
                }) AS $suggest__option_func
                CTPL-TEST type checking
                    expect( $suggest__option_func ).to.be.an.instanceof(Backbone.Model);
                    expect( $suggest__option_func.get('data') ).to.be.an.instanceof(Backbone.Collection);

            CTPL-CODE set filter (only European Union)
                i::suggest ({
                    'data': './examples/i-suggest/capitals.json',
                    'filter': function(option, input){
                        var EU  = !!option.get("EU"),
                            val = option.get('capital').toLowerCase(),
                            str = input.toLowerCase();
                        return EU && (val.indexOf(str) === 0);
                    },
                    'option': function(option){
                        return option.get('code') + " " + option.get('capital');
                    }
                }) AS $suggest__filter
                CTPL-TEST type checking
                    expect( $suggest__filter ).to.be.an.instanceof(Backbone.Model);
                    expect( $suggest__filter.get('data') ).to.be.an.instanceof(Backbone.Collection);

            CTPL-SHOW Define custom templates
                i-suggest__custom-button  $selected $select
                    CHOOSE
                        WHEN ($selected)
                            SET $custom
                            CALL i-suggest__custom ($selected) AS $custom
                            JS
                                $($custom).one(
                                    'mousedown',
                                    function(e){
                                        e.stopPropagation();
                                        $select.set("selected", void(0) );
                                    }
                                );
                                $select.set('input', false);

                        OTHERWISE
                            i::input AS $input
                            JS
                                $select.set('input', $input);


                i-suggest__custom $option
                    div.i-suggest__custom AS $container
                        span.i-suggest__custom-capital
                            ($option.get('capital'))
                        span.i-suggest__custom-code
                            ($option.get('code'))
                    EXPOSE $container


            CTPL-CODE Set custom templates for input and option
                i::suggest ({
                    'data': './examples/i-suggest/capitals.json',
                    'viewButton': $C.tpl['i-suggest__custom-button'],
                    'viewOption': $C.tpl['i-suggest__custom']
                }) AS $suggest__custom_view
                CTPL-TEST check type
                    expect( $suggest__custom_view ).to.be.an.instanceof(Backbone.Model);
                    expect( $suggest__custom_view.get('data') ).to.be.an.instanceof(Backbone.Collection);



