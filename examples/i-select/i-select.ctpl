i-select-example
    ul.i-example__list
        li.i-example__list-item
            p
                "Constructor can recognize following types of input data: String, Array, "
                a
                    @href "http://backbonejs.org/#Collection"
                    "Backbone.Collection"
                " and Object"
            CTPL-SHOW Usage
                i::select ( items ) /* ( options ) */

            CALL i-select-example__options
            CALL i-select-example__string
            CALL i-select-example__array
            CALL i-select-example__collection
            CALL i-select-example__object
            CALL i-select-example__disabled
            CALL i-select-example__customization

i-select-example__options
    h4
        "Options"
    p
        dl
            dt
                "size"
            dd
                "String. Values: S, M (default), L"
            dt
                "placeholder"
            dd
                "String. none (default)"
            dt
                "items"
            dd
                "String, Array, Object or Backbone.Collection"
            dt
                "mode"
            dd
                "String. Values: radio (default) or check"
            dt
                "delim"
            dd
                "String. ',' by default"
            dt
                "disabled"
            dd
                "Boolean. false by default"
            dt
                "viewButton"
            dd
                "Template function for i-select button customization."
            dt
                "viewOption"
            dd
                "Template function for i-select option customization."

i-select-example__string
    CTPL-SUITE String
        p
            "Set items with a comma-separated string."
        CTPL-CODE radio mode
            span AS $stringContainer
                i::select ('One,Two,Three') AS $stringSelect
            SET $stringNode ($($stringContainer.firstChild))
            CTPL-TEST test selected
                // check initial state
                // must return a Backbone.Model
                expect( $stringSelect ).to.be.an.instanceof(Backbone.Model);
                // check options
                var $options = $stringSelect.get('options');
                expect( $options ).to.be.an.instanceof(Backbone.Collection);
                var $option_1 = $options.at(0),
                    $option_2 = $options.at(1),
                    $option_3 = $options.at(2);
                expect( $option_1.get('label') ).to.be.equal('One');
                expect( $option_2.get('label') ).to.be.equal('Two');
                expect( $option_3.get('label') ).to.be.equal('Three');

                // check mode
                expect( $stringSelect.get('mode') ).to.be.equal("radio");
                // check selected
                expect($stringSelect.get("selected")).to.be.a("string").and.to.be.empty();
                // check label
                expect($stringSelect.get("label")).to.equal($stringSelect.get("placeholder"));
                // DOM state
                expect($stringNode.hasClass('i-select__empty'), "empty mod on").to.be.true;
                expect($stringNode.find('.i-button__label').text() ).to.be.equal($stringSelect.get("placeholder"));
                
                // check select value string
                $stringSelect.select("One");
                // model state
                expect($stringSelect.get("selected")).to.be.a("string").and.to.be.equal("One");
                expect($stringSelect.get("label")).to.be.equal("One");
                // DOM state
                expect($stringNode.hasClass('i-select__empty'), "empty mod off").to.be.false;
                expect($stringNode.find('.i-button__label').text() ).to.be.equal('One');

                // check reset
                $stringSelect.reset();
                // model state
                expect($stringSelect.get("selected")).to.be.a("string").and.to.be.empty();
                expect($stringSelect.get("label")).to.equal($stringSelect.get("placeholder"));
                // DOM state
                expect($stringNode.find('.i-button__label').text() ).to.be.equal($stringSelect.get("placeholder"));

                // check setting non-existent value cause reset
                $stringSelect.select("Four");
                // model state
                expect($stringSelect.get("selected")).to.be.a("string").and.to.be.empty();
                expect($stringSelect.get("label")).to.equal($stringSelect.get("placeholder"));
                // DOM state
                expect($stringNode.find('.i-button__label').text() ).to.be.equal($stringSelect.get("placeholder"));

                // test behavior
                $stringSelect.reset();
                // check behavior
                // fire click
                $stringNode.find('.i-button').trigger($.Event('click'));
                // check DOM
                expect($stringNode.hasClass('i-select__empty'), "empty mod on").to.be.true;
                expect($stringNode.hasClass('i-select__open'), "open mod on").to.be.true;

                // check popup
                var popup = $('body .i-popup').last(),
                    popupItems = popup.find('.i-select__options-list__item'),
                    popupStyle = getComputedStyle( popup.get(0), null);
                expect( popupStyle.display ).to.be.equal("block");
                expect( popupItems.length  ).to.be.equal( 3 );
                // check item's nodes
                var $optionItem_1 = popupItems.get(0),
                    $optionItem_2 = popupItems.get(1),
                    $optionItem_3 = popupItems.get(2);

                expect( $($optionItem_1).text()  ).to.be.equal( 'One' );
                expect( $($optionItem_2).text()  ).to.be.equal( 'Two' );
                expect( $($optionItem_3).text()  ).to.be.equal( 'Three' );

                //console.log( ' $optionItem_1 ', $optionItem_1);


        p
            "Set items with a string and a custom delimiter."
        CTPL-CODE check mode
            span AS $stringDelimContainer
                i::select ("One, Two, Three") ({"mode":"check", "delim": ", "}) AS $stringCheckSelect
            SET $stringDelimNode ($($stringDelimContainer.firstChild))
            CTPL-TEST test selected
                // check initial state
                // must return a Backbone.Model
                expect( $stringCheckSelect ).to.be.an.instanceof(Backbone.Model);
                // check options
                var $options = $stringCheckSelect.get('options');
                expect( $options ).to.be.an.instanceof(Backbone.Collection);
                var $option_1 = $options.at(0),
                    $option_2 = $options.at(1),
                    $option_3 = $options.at(2);
                expect( $option_1.get('label') ).to.be.equal('One');
                expect( $option_2.get('label') ).to.be.equal('Two');
                expect( $option_3.get('label') ).to.be.equal('Three');

                // check mode
                expect($stringCheckSelect.get('mode')).to.be.equal("check");
                // check selected
                expect($stringCheckSelect.get("label")).to.equal($stringCheckSelect.get("placeholder"));

                $stringCheckSelect.select("One");
                $stringCheckSelect.select("Two");
                expect($stringCheckSelect.get("selected"))
                    .to.be.a("string").and
                    .to.be.equal("One, Two").and
                    .to.be.equal($stringCheckSelect.get("label"));
                $stringCheckSelect.reset();
                expect($stringCheckSelect.get("selected"))
                    .to.be.a("string").and
                    .to.be.empty();

i-select-example__array
    CTPL-SUITE Array
        p
            "Set items with an array."
        CTPL-CODE radio mode
            i::select (["One", "Two", "Three"]) AS $arraySelect
            CTPL-TEST radio mode
                expect($arraySelect.get("selected"))
                    .to.be.a('null');
                expect($arraySelect.get("label"))
                    .to.equal($arraySelect.get("placeholder"));
                $arraySelect.select("One");
                expect($arraySelect.get("selected"))
                    .to.be.a("string").and
                    .to.be.equal("One");
                $arraySelect.select("Two");
                expect($arraySelect.get("selected"))
                    .to.be.an("string").and
                    .to.be.deep.equal("Two");
                $arraySelect.reset();
                expect($arraySelect.get("selected"))
                    .to.be.a('null');

        CTPL-CODE check mode
            i::select (["One", "Two", "Three"]) ({"mode":"check"}) AS $arrayCheckSelect
            CTPL-TEST check mode
                expect($arrayCheckSelect.get("selected"))
                    .to.be.an("array").and
                    .to.be.empty();
                $arrayCheckSelect.select("One");
                $arrayCheckSelect.select("Two");
                expect($arrayCheckSelect.get("selected"))
                    .to.be.an("array").and
                    .to.be.deep.equal(["One", "Two"]);
                $arrayCheckSelect.reset();
                expect($arrayCheckSelect.get("selected"))
                    .to.be.an("array").and
                    .to.be.empty();

i-select-example__collection
    CTPL-SUITE Backbone.Collection
        CTPL-CODE Define collection
            SET $collection (new Backbone.Collection([
                            {"value":"1", "label":"One", "disabled":true},
                            {"value":"2", "label":"Two"},
                            {"value":"3", "label":"Three"}
                        ]))

        CTPL-CODE radio mode
            i::select ($collection) AS $collectionSelect
            CTPL-TEST radio mode
                expect($collectionSelect.get("selected"))
                    .to.be.a('null');
                $collectionSelect.select($collection.at(0))
                expect($collectionSelect.get("selected"))
                    .to.be.an.instanceof(Backbone.Model).and
                    .to.be.equal($collection.at(0));
                $collection.reset([
                    {"value":"1", "label":"One"},
                    {"value":"2", "label":"Two"},
                    {"value":"3", "label":"Four"}
                ]);
                $collectionSelect.reset();
                expect($collectionSelect.get("selected"))
                    .to.be.a('null');


        CTPL-CODE check mode
            i::select ($collection) ({"mode":"check"}) AS $collectionCheckSelect
            CTPL-TEST check mode
                expect($collectionCheckSelect.get("selected"))
                    .to.be.an('array').and
                    .to.be.empty();
                $collectionCheckSelect.select($collection.at(0))
                $collectionCheckSelect.select($collection.at(1))
                expect($collectionCheckSelect.get("selected"))
                    .to.be.an('array').and
                    .to.be.deep.equal([$collection.at(0),$collection.at(1)]);
                $collectionCheckSelect.reset();
                expect($collectionCheckSelect.get("selected"))
                    .to.be.an('array').and
                    .to.be.empty();

i-select-example__object
    CTPL-SUITE Object
        CTPL-CODE radio mode
            i::select ({
                "options":      "One; Two; Three",
                "size":         "S",
                "placeholder":  "numbers",
                "delim":        "; ",
                "mode":         "check"
            })

i-select-example__disabled
    CTPL-SUITE Disabled
        CTPL-CODE disabled
            i::select ('One,Two,Three') ({'disabled':true})

i-select-example__customization
    CTPL-SUITE Customization
        p
            "It's easy to modify "
            b
                "i-select"
            " view with custom templates. "
        CTPL-SHOW Define custom templates
            i-select__view-button $selected $select $check
                SET $label  ($selected || 'empty')
                div.i-select__view-button
                    span.i-select__view-button-label
                        ($label)
                    TEST ($label!='empty')
                        span.i-select__view-button-delete AS $delete
                            "×"
                        JS
                            $delete.addEventListener(
                                "mouseup",
                                function(e){
                                    e.stopPropagation();
                                    if($check){
                                        $select.select($label);
                                    } else {
                                        $select.reset();
                                    }
                                }
                            )
            i-select__view-option $model
                div.i-select__view-option
                    "→ "
                    ($model.get('label'))
                    " ←"

        CTPL-CODE radio mode
            i::select (
                {
                    "options":    "One,Two,Three",
                    "viewButton": $C.tpl["i-select__view-button"],
                    "viewOption": $C.tpl["i-select__view-option"]
                }
            ) AS $radioSelect
            CTPL-TEST must return a Backbone.Model
                expect( $radioSelect ).to.be.an('object');
                expect( $radioSelect ).to.be.an.instanceof(Backbone.Model);


        CTPL-CODE check mode
            i::select (
                {
                    "options":    "One,Two,Three",
                    "viewButton": $C.tpl["i-select__view-button"],
                    "viewOption": $C.tpl["i-select__view-option"],
                    "mode":       "check"
                }
            ) AS $checkSelect
            CTPL-TEST "test type"
                expect( $checkSelect ).to.be.an('object')

